<?php

namespace CoreBundle\Repository;
use DateInterval;
use DateTime;
/**
 * PaymentRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PaymentRepository extends \Doctrine\ORM\EntityRepository
{
	public function findAllByDate(DateTime $dateBefore,DateTime $dateAfter){
		$qb = $this->createQueryBuilder('payment');
		return $qb->where('payment.vadsEffectiveCreationDate < ?1')->andWhere('payment.vadsEffectiveCreationDate > ?2')->setParameters(array(1=>$dateAfter,2=>$dateBefore))->getQuery()->getResult();
	}

	public function findAllClientByDate($dates){
		$qb = $this->createQueryBuilder('payment');
		return $qb->select('DISTINCT payment.vadsCustId, payment.vadsCustFirstName, payment.vadsCustLastName')->where('payment.vadsEffectiveCreationDate > ?1')->andWhere('payment.vadsEffectiveCreationDate < ?2')->setParameters(array(1=>$dates['dateBefore'],2=>$dates['dateAfter']))->orderBy('payment.vadsEffectiveCreationDate','DESC')->getQuery()->getResult();
	}

	public function findNbAcceptedClient($client,$dates){
		$qb = $this->createQueryBuilder('payment');
		return $qb->select('COUNT(DISTINCT payment.uuid)')->where('payment.vadsEffectiveCreationDate > ?1 ')->andWhere("payment.vadsCustId = ?2")->setParameter(2,$client)->andWhere('payment.vadsEffectiveCreationDate < ?3 ')->setParameters(array(1=>$dates['dateBefore'],2=>$client,3=>$dates['dateAfter']))->andWhere("payment.vadsTransStatus != 'REFUSED'")->getQuery()->getSingleScalarResult();
	}
	
	public function findNbCommandClient($client,$dates){
		return $this->findNbAcceptedClient($client,$dates) + $this->findNbRefusedClient($client,$dates);
	}

	public function findNbRefusedClient($client,$dates){
		$qb = $this->createQueryBuilder('payment');
		return count($qb->select('SUBSTRING(payment.vadsEffectiveCreationDate,1,10) AS pDay')->where('payment.vadsEffectiveCreationDate > ?1 ')->andWhere("payment.vadsCustId = ?2")->setParameter(2,$client)->andWhere('payment.vadsEffectiveCreationDate < ?3 ')->setParameters(array(1=>$dates['dateBefore'],2=>$client,3=>$dates['dateAfter']))->andWhere("payment.vadsTransStatus = 'REFUSED'")->groupBy('pDay')->getQuery()->getResult());
	}

	public function findTtAmountClient($client,$dates){
		$qb = $this->createQueryBuilder('payment');
		return $qb->select('SUM(payment.vadsEffectiveAmount)')->where('payment.vadsEffectiveCreationDate > ?1 ')->andWhere("payment.vadsCustId = ?2")->setParameter(2,$client)->andWhere('payment.vadsEffectiveCreationDate < ?3 ')->andWhere("payment.vadsOperationType = '0'")->andWhere("payment.vadsTransStatus != 'REFUSED'")->setParameters(array(1=>$dates['dateBefore'],2=>$client,3=>$dates['dateAfter']))->getQuery()->getSingleScalarResult() + 0;
	}

	public function findNbCommand(DateTime $dateBefore,DateTime $dateAfter){
		return $this->findNbAccepted($dateBefore,$dateAfter) + $this->findNbRefused($dateBefore,$dateAfter);
	}

	public function findNbClient(DateTime $dateBefore, DateTime $dateAfter){
		$qb = $this->createQueryBuilder('payment');
		return $qb->where('payment.vadsEffectiveCreationDate > ?1 ')->setParameter(1,$dateBefore)->andWhere('payment.vadsEffectiveCreationDate <= ?2 ')->setParameter(2,$dateAfter)->select('COUNT(DISTINCT payment.vadsCustId)')->getQuery()->getSingleScalarResult();
	}

	public function findNbAccepted(DateTime $dateBefore, DateTime $dateAfter){
		$qb = $this->createQueryBuilder('payment');
		$qb->where('payment.vadsEffectiveCreationDate > ?1 ')->setParameter(1,$dateBefore)->andWhere('payment.vadsEffectiveCreationDate <= ?2 ')->setParameter(2,$dateAfter);
		return $qb->select('COUNT(payment.uuid)')->andWhere("payment.vadsTransStatus != 'REFUSED'")->getQuery()->getSingleScalarResult() + 0;
	}

	public function findNbRefused(DateTime $dateBefore, DateTime $dateAfter){
		$qb = $this->createQueryBuilder('payment');
		$qb->select('DISTINCT payment.vadsCustId')->where('payment.vadsEffectiveCreationDate > ?1 ')->setParameter(1,$dateBefore)->andWhere('payment.vadsEffectiveCreationDate <= ?2 ')->setParameter(2,$dateAfter)->andWhere("payment.vadsTransStatus = 'REFUSED'");
		$client_list = $qb->getQuery()->getResult();
		$total = 0;
		foreach ($client_list as $row) {
			$qb = $this->createQueryBuilder('payment');
			$qb->select('COUNT(payment.uuid)')->where('payment.vadsEffectiveCreationDate >= ?1 ')->setParameter(1,$dateBefore->format("Y-m-d"))->andWhere('payment.vadsEffectiveCreationDate < ?2 ')->setParameter(2,$dateBefore)->andWhere("payment.vadsTransStatus = 'REFUSED'")->andWhere('payment.vadsCustId = ?3')->setParameter(3,$row['vadsCustId']);
			if ($qb->getQuery()->getSingleScalarResult() == 0){
				$total++;
			}
		}
		return $total;
	}

	public function findTtAmount(DateTime $dateBefore,DateTime $dateAfter){
		$qb = $this->createQueryBuilder('payment');
		return $qb->select('SUM(payment.vadsEffectiveAmount)')->where('payment.vadsEffectiveCreationDate > ?1 ')->setParameter(1,$dateBefore)->andWhere('payment.vadsEffectiveCreationDate <= ?2 ')->setParameter(2,$dateAfter)->andWhere("payment.vadsTransStatus != 'REFUSED'")->andWhere("payment.vadsOperationType = '0'")->getQuery()->getSingleScalarResult() + 0;
	}

	public function findTtAmountCredit(DateTime $dateBefore,DateTime $dateAfter){
		$qb = $this->createQueryBuilder('payment');
		return -1*$qb->select('SUM(payment.vadsEffectiveAmount)')->where('payment.vadsEffectiveCreationDate > ?1 ')->setParameter(1,$dateBefore)->andWhere('payment.vadsEffectiveCreationDate <= ?2 ')->setParameter(2,$dateAfter)->andWhere("payment.vadsTransStatus != 'REFUSED'")->andWhere("payment.vadsOperationType = '1'")->getQuery()->getSingleScalarResult() + 0;
	}

	public function findNbCommandCredit(DateTime $dateBefore,DateTime $dateAfter){
		return $this->findNbAcceptedCredit($dateBefore,$dateAfter) + $this->findNbRefusedCredit($dateBefore,$dateAfter);
	}

	public function findNbClientCredit(DateTime $dateBefore, DateTime $dateAfter){
		$qb = $this->createQueryBuilder('payment');
		return $qb->where('payment.vadsEffectiveCreationDate > ?1 ')->setParameter(1,$dateBefore)->andWhere('payment.vadsEffectiveCreationDate <= ?2 ')->andWhere("payment.vadsOperationType = '1'")->setParameter(2,$dateAfter)->select('COUNT(DISTINCT payment.vadsCustId)')->getQuery()->getSingleScalarResult();
	}

	public function findNbAcceptedCredit(DateTime $dateBefore, DateTime $dateAfter){
		$qb = $this->createQueryBuilder('payment');
		$qb->where('payment.vadsEffectiveCreationDate > ?1 ')->setParameter(1,$dateBefore)->andWhere('payment.vadsEffectiveCreationDate <= ?2 ')->andWhere("payment.vadsOperationType = '1'")->setParameter(2,$dateAfter);
		return $qb->select('COUNT(payment.uuid)')->andWhere("payment.vadsTransStatus != 'REFUSED'")->getQuery()->getSingleScalarResult() + 0;
	}

	public function findNbRefusedCredit(DateTime $dateBefore, DateTime $dateAfter){
		$qb = $this->createQueryBuilder('payment');
		$qb->select('DISTINCT payment.vadsCustId')->where('payment.vadsEffectiveCreationDate > ?1 ')->setParameter(1,$dateBefore)->andWhere('payment.vadsEffectiveCreationDate <= ?2 ')->setParameter(2,$dateAfter)->andWhere("payment.vadsOperationType = '1'")->andWhere("payment.vadsTransStatus = 'REFUSED'");
		$client_list = $qb->getQuery()->getResult();
		$total = 0;
		foreach ($client_list as $row) {
			$qb = $this->createQueryBuilder('payment');
			$qb->select('COUNT(payment.uuid)')->where('payment.vadsEffectiveCreationDate >= ?1 ')->setParameter(1,$dateBefore->format("Y-m-d"))->andWhere('payment.vadsEffectiveCreationDate < ?2 ')->setParameter(2,$dateBefore)->andWhere("payment.vadsTransStatus = 'REFUSED'")->andWhere('payment.vadsCustId = ?3')->setParameter(3,$row['vadsCustId']);
			if ($qb->getQuery()->getSingleScalarResult() == 0){
				$total++;
			}
		}
		return $total;
	}

}
